name: webapi-build
on:
    workflow_dispatch:
        inputs:
            runners:
                description: environment [cloud-aws,cloud-google,cloud-oracle,inhouse-base,inhouse-boston,inhouse-dev,inhouse-multinode,all]
                default: inhouse-boston,cloud-google
                required: true
            tag:
                description: build with tag. if no tag provide, will use latest of select branch to build
                required: false

jobs:
    job1:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            -   id: set-matrix
                #                run: echo "::set-output name=matrix::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
                run: echo '::set-output name=matrix::{"include":[{"project":"foo","config":"Debug"},{"project":"bar","config":"Release"}]}'

    job2:
        needs: job1
        runs-on: ubuntu-latest
        strategy:
            matrix: ${{fromJson(needs.job1.outputs.matrix)}}
        steps:
            -   run: echo ${{matrix.project}}
            -   run: echo ${{matrix.config}}

    setup-build-matrix:
        runs-on: ubuntu-latest
        env:
            ENVIRONMENT: ${{ github.event.inputs.envName || 'dev' }}
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            -   uses: actions/checkout@v2
            -   name: echo github inputs
                run: echo '${{ toJSON(github.event.inputs) }}'

            -   name: notice
                run: |
                    echo "::notice ::environment: ${{github.event.inputs.runners}}"
                    echo "::notice ::tag: ${{github.event.inputs.tag}}"

            -   id: set-matrix
                run: |
                    echo '::set-output name=matrix::{"include": [{"runner": "inhouse-deploy","solver_folder": "/sharedssd/tidy3d_solver"},{"runner": "bos-inhouse-deploy","solver_folder": "/shared_data/tidy3d","cuda":"/usr/local/cuda/bin","mpi": "/opt/mvapich2/gdr/2.3.6/no-mpittool/no-openacc/cuda11.3/mofed5.4/mpirun/gnu8.4.1/bin"},{"runner": "gcloud-deploy","solver_folder": "/sharedssd/tidy3d","cuda":"/usr/local/cuda/bin"},{"runner": "oracle-deploy","solver_folder": "/sharedssd/tidy3d","cuda":"/usr/local/cuda/bin","mpi": "/opt/mvapich2/gdr/2.3.7pre/no-mpittool/no-openacc/cuda11.4/mofed5.5/mpirun/gnu9.3.0/bin"},{"runner": "aws-deploy","solver_folder": "/shared_data/tidy3d","cuda":"/usr/local/cuda/bin"}]}'

    output-matrix:
        needs: [ setup-build-matrix ]
        runs-on: ubuntu-latest
        environment: ${{ github.event.inputs.envName || 'dev' }}
        strategy:
            matrix: ${{fromJson(needs.setup-build-matrix.outputs.matrix)}}
        steps:
            -   uses: actions/checkout@v3
                name: checkout HEAD
                if: ${{ !github.event.inputs.tag }}
                with:
                    token: ${{ secrets.ACCESS_TOKEN }}
                    submodules: recursive

            -   uses: actions/checkout@v3
                name: checkout with tag
                if: ${{ github.event.inputs.tag }}
                with:
                    submodules: recursive
                    token: ${{ secrets.ACCESS_TOKEN }}
                    ref: refs/tags/${{ github.event.inputs.tag }}

            -   name: create version label for git tag
                if: ${{ github.event.inputs.tag }}
                run: |
                    tag=$(echo ${{ github.event.inputs.tag }} | rev | cut -d/ -f1 | rev)
                    #echo "GIT_TAG=$tag" >> $GITHUB_ENV
                    #echo "REPO_TAG=$tag" >> $GITHUB_ENV
                    echo "BUILD_VERSION=$tag" >> $GITHUB_ENV
                    #git_hash=$(git rev-parse --short HEAD)
                    #echo "GIT_SHORT_SHA=$git_hash" >> $GITHUB_ENV
                    #echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

            -   name: Setup cuda-bin
                if: ${{ matrix.cuda }}
                run: echo "${{matrix.cuda}}" >> $GITHUB_PATH
            -   name: Setup mpi-bin
                if: ${{ matrix.mpi }}
                run: echo "${{matrix.mpi}}" >> $GITHUB_PATH

            -   name: create folder for solver version
                run: mkdir -p ${{matrix.solver_folder}}/${{ env.BUILD_VERSION }}

            -   name: Build
                if: ${{ env.BUILD_VERSION }}
                run: bash scripts/build_release.sh ${{matrix.solver_folder}}/${{ env.BUILD_VERSION }}