name: webapi-build
on:
    workflow_dispatch:
        inputs:
            runners:
                description: environment [cloud-aws,cloud-google,cloud-oracle,inhouse-base,inhouse-boston,inhouse-dev,inhouse-multinode,all]
                required: false
            tag:
                description: build with tag. if no tag provide, will use latest of select branch to build
                required: false

jobs:
    setup-build-matrix:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            -   name: notice
                run: |
                    echo "::notice ::runners: ${{github.event.inputs.runners}}"
                    echo "::notice ::tag: ${{github.event.inputs.tag}}"

            -   id: set-matrix
                run: |
                    if [[ "${{ github.event.inputs.runners }}" != '' ]]; then
                        runners="${{ github.event.inputs.runners }}"
                        groups=$(echo -n $runners | jq -cRs 'split(";")')
                        echo "?????"
                        echo $groups
                        echo "::set-output name=matrix::$groups"
                    else
                        echo "++++++??"
                        echo '::set-output name=matrix::[["inhouse-deploy","dev"],"bos-inhouse-deploy","oracle-deploy"]'
                    fi
#            -   id: set-matrix
#                run: |
#                    echo '::set-output name=matrix::[["inhouse-deploy","dev"],"bos-inhouse-deploy","oracle-deploy"]'

    #            -   name: echo json
    #                run: |
    #                    echo 'RUNNER_CONFIG={"include": [{"runner": "inhouse-deploy","solver_folder": "/sharedssd/tidy3d_solver"},{"runner": "bos-inhouse-deploy","solver_folder": "/shared_data/tidy3d","cuda":"/usr/local/cuda/bin","mpi": "/opt/mvapich2/gdr/2.3.6/no-mpittool/no-openacc/cuda11.3/mofed5.4/mpirun/gnu8.4.1/bin"},{"runner": "gcloud-deploy","solver_folder": "/sharedssd/tidy3d","cuda":"/usr/local/cuda/bin"},{"runner": "oracle-deploy","solver_folder": "/sharedssd/tidy3d","cuda":"/usr/local/cuda/bin","mpi": "/opt/mvapich2/gdr/2.3.7pre/no-mpittool/no-openacc/cuda11.4/mofed5.5/mpirun/gnu9.3.0/bin"},{"runner": "aws-deploy","solver_folder": "/shared_data/tidy3d","cuda":"/usr/local/cuda/bin"}]}' >> $GITHUB_ENV
    #

    #            -   id: set-matrix
    #                run: |
    #                    if [[ "${{ github.event.inputs.runners }}" == '' ]]; then
    #                        echo '::set-output name=matrix::${{env.RUNNER_CONFIG}}'
    #                    else
    #                      jq -c '.include' ${{env.RUNNER_CONFIG }} | while read i; do
    #                      runner=$(echo $i | jq -r '.runner')
    #                      echo $runner
    #                      echo '::set-output name=matrix::${{env.RUNNER_CONFIG}}'
    #
    #
    #                      if [ "$version" == "$target_version" ]; then
    #                        folder=$(echo $i | jq -r '.folder')
    #                        if [ "${version:0:7}" == 'tidy3d-' ]; then
    #                          tag_version="v${version:7}"
    #                          echo "clone $tag_version to $folder"
    #                          echo "FOLDER=$folder" >>$GITHUB_ENV
    #                          git clone https://$GH\_ACCESS\_TOKEN@github.com/flexcompute/tidy3d.git "./$folder/$version"
    #                          exit 0
    #                        else
    #                          echo "version does not start with tidy3d-"
    #                          exit 1
    #                        fi
    #                      fi
    #                    fi

    output-matrix:
        needs: [ setup-build-matrix ]
        runs-on: ubuntu-latest
        environment: ${{ github.event.inputs.envName || 'dev' }}
        strategy:
            matrix:
                runner: ${{fromJson(needs.setup-build-matrix.outputs.matrix)}}
        steps:
            -   run: echo ${{ matrix.runner }}
            -   run: |
                    echo 'RUNNER_CONFIG={"include": [{"runner": "inhouse-deploy","solver_folder": "/sharedssd/tidy3d_solver"},{"runner": "bos-inhouse-deploy","solver_folder": "/shared_data/tidy3d","cuda":"/usr/local/cuda/bin","mpi": "/opt/mvapich2/gdr/2.3.6/no-mpittool/no-openacc/cuda11.3/mofed5.4/mpirun/gnu8.4.1/bin"},{"runner": "gcloud-deploy","solver_folder": "/sharedssd/tidy3d","cuda":"/usr/local/cuda/bin"},{"runner": "oracle-deploy","solver_folder": "/sharedssd/tidy3d","cuda":"/usr/local/cuda/bin","mpi": "/opt/mvapich2/gdr/2.3.7pre/no-mpittool/no-openacc/cuda11.4/mofed5.5/mpirun/gnu9.3.0/bin"},{"runner": "aws-deploy","solver_folder": "/shared_data/tidy3d","cuda":"/usr/local/cuda/bin"}]}' >> $GITHUB_ENV

            -   run: |
                    config='${{env.RUNNER_CONFIG}}'
                    echo '${{env.RUNNER_CONFIG}}' | jq -c '.[]' | while read i; do
                      echo $i
                    done


            -   uses: actions/checkout@v3
                name: checkout HEAD
                if: ${{ !github.event.inputs.tag }}
                with:
                    token: ${{ secrets.ACCESS_TOKEN }}
                    submodules: recursive

            -   uses: actions/checkout@v3
                name: checkout with tag
                if: ${{ github.event.inputs.tag }}
                with:
                    submodules: recursive
                    token: ${{ secrets.ACCESS_TOKEN }}
                    ref: refs/tags/${{ github.event.inputs.tag }}

            -   name: create version label for git tag
                if: ${{ github.event.inputs.tag }}
                run: |
                    tag=$(echo ${{ github.event.inputs.tag }} | rev | cut -d/ -f1 | rev)
                    #echo "GIT_TAG=$tag" >> $GITHUB_ENV
                    #echo "REPO_TAG=$tag" >> $GITHUB_ENV
                    echo "BUILD_VERSION=$tag" >> $GITHUB_ENV
                    #git_hash=$(git rev-parse --short HEAD)
                    #echo "GIT_SHORT_SHA=$git_hash" >> $GITHUB_ENV
                    #echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

            -   name: Setup cuda-bin
                if: ${{ matrix.cuda }}
                run: echo "${{matrix.cuda}}" >> $GITHUB_PATH
            -   name: Setup mpi-bin
                if: ${{ matrix.mpi }}
                run: echo "${{matrix.mpi}}" >> $GITHUB_PATH

            -   name: create folder for solver version
                run: mkdir -p ${{matrix.solver_folder}}/${{ env.BUILD_VERSION }}

            -   name: Build
                if: ${{ env.BUILD_VERSION }}
                run: bash scripts/build_release.sh ${{matrix.solver_folder}}/${{ env.BUILD_VERSION }}